# See: https://taskfile.dev/#/usage
version: "3"

includes:
  dist: ./DistTasks.yml

vars:
  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/release-go-task/Taskfile.yml
  PROJECT_NAME: "dfu-discovery"
  DIST_DIR: "dist"
  # build vars
  COMMIT:
    sh: echo "$(git log --no-show-signature -n 1 --format=%h)"
  TIMESTAMP:
    sh: echo "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
  TIMESTAMP_SHORT:
    sh: echo "{{now | date "20060102"}}"
  TAG:
    sh: echo "$(git tag --points-at=HEAD 2> /dev/null | head -n1)"
  VERSION: "{{if .NIGHTLY}}nightly-{{.TIMESTAMP_SHORT}}{{else if .TAG}}{{.TAG}}{{else}}{{.PACKAGE_NAME_PREFIX}}git-snapshot{{end}}"
  CONFIGURATION_PACKAGE: github.com/arduino/dfu-discovery/version
  LDFLAGS: >-
    -ldflags
    '
    -X {{.CONFIGURATION_PACKAGE}}.Version={{.VERSION}}
    -X {{.CONFIGURATION_PACKAGE}}.Commit={{.COMMIT}}
    -X {{.CONFIGURATION_PACKAGE}}.Timestamp={{.TIMESTAMP}}
    '
  DFU_UTIL_VERSION: dfu-util-0.11
  LIBUSB_VERSION: libusb-1.0.26
  # Path of the project's primary Go module:
  DEFAULT_GO_MODULE_PATH: ./
  DEFAULT_GO_PACKAGES:
    sh: |
      echo $(
        cd {{default .DEFAULT_GO_MODULE_PATH .GO_MODULE_PATH}} &&
        go list ./... | tr '\n' ' ' ||
        echo '"ERROR: Unable to discover Go packages"'
      )

tasks:
  download-dfu-util:
    desc: download dfu-util and copy the files in the correct dir
    cmds:
      - |
        if [ -d "{{.DFU_UTIL_VERSION}}" ];
          then
            echo "{{.DFU_UTIL_VERSION}} already downloaded (directory exists)."
          else
            echo "Downloading {{.DFU_UTIL_VERSION}}..."
            curl https://dfu-util.sourceforge.net/releases/{{.DFU_UTIL_VERSION}}.tar.gz -s | tar xz

            cp {{.DFU_UTIL_VERSION}}/src/dfuse_mem.c dfu-util_dfuse_mem.c
            cp {{.DFU_UTIL_VERSION}}/src/dfu_util.c dfu-util_dfu_util.c
            cp {{.DFU_UTIL_VERSION}}/src/quirks.c dfu-util_quirks.c
            # for some reason quirks.c has the exec flag set
            chmod -x dfu-util_quirks.c
        fi
  
  download-libusb:
    desc: download libusb and copy the files in the correct dir
    cmds:
      - |
        if [ -d "{{.LIBUSB_VERSION}}" ];
          then
            echo "{{.LIBUSB_VERSION}} already downloaded (directory exists)."
          else
            echo "Downloading {{.LIBUSB_VERSION}}..."
            curl -L https://github.com/libusb/libusb/releases/download/v1.0.26/libusb-1.0.26.tar.bz2 -s | tar xj
            cp {{.LIBUSB_VERSION}}/libusb/libusb.h .
          fi

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-go-dependencies-task/Taskfile.yml
  general:prepare-deps:
    desc: Prepare project dependencies for license check
    # No preparation is needed for Go module-based projects.

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-dependencies-task/Taskfile.yml
  general:cache-dep-licenses:
    desc: Cache dependency license metadata
    deps:
      - task: general:prepare-deps
    cmds:
      - |
        if ! which licensed &>/dev/null; then
          if [[ {{OS}} == "windows" ]]; then
            echo "Licensed does not have Windows support."
            echo "Please use Linux/macOS or download the dependencies cache from the GitHub Actions workflow artifact."
          else
            echo "licensed not found or not in PATH."
            echo "Please install: https://github.com/github/licensed#as-an-executable"
          fi
          exit 1
        fi
      - licensed cache

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-dependencies-task/Taskfile.yml
  general:check-dep-licenses:
    desc: Check for unapproved dependency licenses
    deps:
      - task: general:cache-dep-licenses
    cmds:
      - licensed status

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-go-task/Taskfile.yml
  go:fix:
    desc: Modernize usages of outdated APIs
    dir: "{{default .DEFAULT_GO_MODULE_PATH .GO_MODULE_PATH}}"
    cmds:
      - go fix {{default .DEFAULT_GO_PACKAGES .GO_PACKAGES}}

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-go-task/Taskfile.yml
  go:format:
    desc: Format Go code
    dir: "{{default .DEFAULT_GO_MODULE_PATH .GO_MODULE_PATH}}"
    cmds:
      - go fmt {{default .DEFAULT_GO_PACKAGES .GO_PACKAGES}}

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-go-task/Taskfile.yml
  go:lint:
    desc: Lint Go code
    dir: "{{default .DEFAULT_GO_MODULE_PATH .GO_MODULE_PATH}}"
    cmds:
      - |
        if ! which golint &>/dev/null; then
          echo "golint not installed or not in PATH. Please install: https://github.com/golang/lint#installation"
          exit 1
        fi
      - |
        golint \
          {{default "-min_confidence 0.8 -set_exit_status" .GO_LINT_FLAGS}} \
          {{default .DEFAULT_GO_PACKAGES .GO_PACKAGES}}

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-go-task/Taskfile.yml
  go:vet:
    desc: Check for errors in Go code
    dir: "{{default .DEFAULT_GO_MODULE_PATH .GO_MODULE_PATH}}"
    cmds:
      - go vet {{default .DEFAULT_GO_PACKAGES .GO_PACKAGES}}
